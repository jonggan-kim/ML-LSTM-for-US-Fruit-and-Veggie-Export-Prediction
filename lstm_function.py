{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow.keras\n",
    "from keras.models import Sequential\n",
    "from keras.utils import to_categorical\n",
    "from keras.optimizers import SGD \n",
    "from keras.callbacks import EarlyStopping\n",
    "from keras.utils import np_utils\n",
    "import itertools\n",
    "from keras.layers.convolutional import Conv1D\n",
    "from keras.layers.convolutional import MaxPooling1D\n",
    "from keras.layers import Dense, Dropout, LSTM, Activation\n",
    "from pandas import Series\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from tensorflow.keras import backend\n",
    "\n",
    "# from tensorflow.python.framework import ops\n",
    "# ops.reset_default_graph()\n",
    "\n",
    "# tensorflow version and keras version matters for compatability (latest versions not working together tensorflow 2.0 and keras 2.2.4)\n",
    "# error message - AttributeError: module 'tensorflow' has no attribute 'get_default_graph'\n",
    "# tensorflow 1.13.1 and keras 2.2.4 worked below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from collections import defaultdict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "from dateutil.relativedelta import relativedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>9769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>13467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>13274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>11550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>8444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>8552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>8111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>10317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>11011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>8768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>11019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>13129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>11740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>10830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>7156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>7584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>9029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>10145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>10362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>8889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>8472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>8197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>8164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>8933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>9908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>10528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>7474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>6586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>5626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>5586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>9204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>9472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>9423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>8442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>9187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>10525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>9467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>9664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>6865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>6891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>8128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>8400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>8584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>9157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  10521\n",
       "1    1   9769\n",
       "2    2  10227\n",
       "3    3  13467\n",
       "4    4  13274\n",
       "5    5  11550\n",
       "6    6   8444\n",
       "7    7   7708\n",
       "8    8   8022\n",
       "9    9   8552\n",
       "10  10   8111\n",
       "11  11  10317\n",
       "12  12  11011\n",
       "13  13   8768\n",
       "14  14  11019\n",
       "15  15  13129\n",
       "16  16  11740\n",
       "17  17  10830\n",
       "18  18   7156\n",
       "19  19   7584\n",
       "20  20   9029\n",
       "21  21  10145\n",
       "22  22  10362\n",
       "23  23   8889\n",
       "24  24   8472\n",
       "25  25   8197\n",
       "26  26   8164\n",
       "27  27   8933\n",
       "28  28   9908\n",
       "29  29  10528\n",
       "30  30   7474\n",
       "31  31   6586\n",
       "32  32   5626\n",
       "33  33   5586\n",
       "34  34   9204\n",
       "35  35   9472\n",
       "36  36   9423\n",
       "37  37   8442\n",
       "38  38   9187\n",
       "39  39  10525\n",
       "40  40   9467\n",
       "41  41   9664\n",
       "42  42   6865\n",
       "43  43   6891\n",
       "44  44   8128\n",
       "45  45   8400\n",
       "46  46   8584\n",
       "47  47   9157"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "broc_data = pd.read_csv(\"dset/broc.csv\")\n",
    "broc_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = broc_data['value'].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_21 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_22 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_11 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 5s 139ms/step - loss: 0.0691 - mean_squared_error: 0.0691 - val_loss: 0.0168 - val_mean_squared_error: 0.0168\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0587 - mean_squared_error: 0.0587 - val_loss: 0.0082 - val_mean_squared_error: 0.0082\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0509 - mean_squared_error: 0.0509 - val_loss: 0.0035 - val_mean_squared_error: 0.0035\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0465 - mean_squared_error: 0.0465 - val_loss: 0.0052 - val_mean_squared_error: 0.0052\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0416 - mean_squared_error: 0.0416 - val_loss: 0.0171 - val_mean_squared_error: 0.0171\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0408 - mean_squared_error: 0.0408 - val_loss: 0.0212 - val_mean_squared_error: 0.0212\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0399 - mean_squared_error: 0.0399 - val_loss: 0.0211 - val_mean_squared_error: 0.0211\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0397 - mean_squared_error: 0.0397 - val_loss: 0.0139 - val_mean_squared_error: 0.0139\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 2ms/step - loss: 0.0391 - mean_squared_error: 0.0391 - val_loss: 0.0109 - val_mean_squared_error: 0.0109\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 2ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0076 - val_mean_squared_error: 0.0076\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0394 - mean_squared_error: 0.0394 - val_loss: 0.0098 - val_mean_squared_error: 0.0098\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0392 - mean_squared_error: 0.0392 - val_loss: 0.0101 - val_mean_squared_error: 0.0101\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0384 - mean_squared_error: 0.0384 - val_loss: 0.0138 - val_mean_squared_error: 0.0138\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0382 - mean_squared_error: 0.0382 - val_loss: 0.0181 - val_mean_squared_error: 0.0181\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0387 - mean_squared_error: 0.0387 - val_loss: 0.0263 - val_mean_squared_error: 0.0263\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0397 - mean_squared_error: 0.0397 - val_loss: 0.0213 - val_mean_squared_error: 0.0213\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 2ms/step - loss: 0.0387 - mean_squared_error: 0.0387 - val_loss: 0.0108 - val_mean_squared_error: 0.0108\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0381 - mean_squared_error: 0.0381 - val_loss: 0.0149 - val_mean_squared_error: 0.0149\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0380 - mean_squared_error: 0.0380 - val_loss: 0.0177 - val_mean_squared_error: 0.0177\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0387 - mean_squared_error: 0.0387 - val_loss: 0.0158 - val_mean_squared_error: 0.0158\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 2ms/step - loss: 0.0383 - mean_squared_error: 0.0383 - val_loss: 0.0139 - val_mean_squared_error: 0.0139\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0376 - mean_squared_error: 0.0376 - val_loss: 0.0126 - val_mean_squared_error: 0.0126\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0381 - mean_squared_error: 0.0381 - val_loss: 0.0137 - val_mean_squared_error: 0.0137\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0384 - mean_squared_error: 0.0384 - val_loss: 0.0073 - val_mean_squared_error: 0.0073\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0375 - mean_squared_error: 0.0375 - val_loss: 0.0076 - val_mean_squared_error: 0.0076\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 2ms/step - loss: 0.0376 - mean_squared_error: 0.0376 - val_loss: 0.0065 - val_mean_squared_error: 0.0065\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0378 - mean_squared_error: 0.0378 - val_loss: 0.0110 - val_mean_squared_error: 0.0110\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0377 - mean_squared_error: 0.0377 - val_loss: 0.0097 - val_mean_squared_error: 0.0097\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0372 - mean_squared_error: 0.0372 - val_loss: 0.0092 - val_mean_squared_error: 0.0092\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0376 - mean_squared_error: 0.0376 - val_loss: 0.0079 - val_mean_squared_error: 0.0079\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a2e3e2da0>"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model\n",
    "model.save(\"broc_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Broccoli')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>7804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>9948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>9790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>8910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>7219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>3783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>3203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>4058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>5510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>7506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>8027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>7571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>9134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>9650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>10279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>8489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>6184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>3148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>2734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>3188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>4645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>7656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>7039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>6822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>8362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>9026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>8685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>8388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>6094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>3172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>2719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>2870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>3586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>6861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>7376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>6403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>9282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>9372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>8738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>6227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>3320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>2755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>2982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>4839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>7347</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0   7804\n",
       "1    1   7198\n",
       "2    2   9948\n",
       "3    3   9790\n",
       "4    4  10273\n",
       "5    5   8910\n",
       "6    6   7219\n",
       "7    7   3783\n",
       "8    8   3203\n",
       "9    9   4058\n",
       "10  10   5510\n",
       "11  11   7506\n",
       "12  12   8027\n",
       "13  13   7571\n",
       "14  14   9134\n",
       "15  15   9650\n",
       "16  16  10279\n",
       "17  17   8489\n",
       "18  18   6184\n",
       "19  19   3148\n",
       "20  20   2734\n",
       "21  21   3188\n",
       "22  22   4645\n",
       "23  23   7656\n",
       "24  24   7039\n",
       "25  25   6822\n",
       "26  26   8362\n",
       "27  27   9026\n",
       "28  28   8685\n",
       "29  29   8388\n",
       "30  30   6094\n",
       "31  31   3172\n",
       "32  32   2719\n",
       "33  33   2870\n",
       "34  34   3586\n",
       "35  35   6861\n",
       "36  36   7376\n",
       "37  37   6403\n",
       "38  38   9282\n",
       "39  39   9089\n",
       "40  40   9372\n",
       "41  41   8738\n",
       "42  42   6227\n",
       "43  43   3320\n",
       "44  44   2755\n",
       "45  45   2982\n",
       "46  46   4839\n",
       "47  47   7347"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carr_data = pd.read_csv(\"dset/carr.csv\")\n",
    "carr_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = carr_data['value'].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_23 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_24 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_12 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 5s 145ms/step - loss: 0.4448 - mean_squared_error: 0.4448 - val_loss: 0.1451 - val_mean_squared_error: 0.1451\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.4053 - mean_squared_error: 0.4053 - val_loss: 0.1555 - val_mean_squared_error: 0.1555\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.3785 - mean_squared_error: 0.3785 - val_loss: 0.1824 - val_mean_squared_error: 0.1824\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.3461 - mean_squared_error: 0.3461 - val_loss: 0.2199 - val_mean_squared_error: 0.2199\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.3165 - mean_squared_error: 0.3165 - val_loss: 0.2875 - val_mean_squared_error: 0.2875\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2855 - mean_squared_error: 0.2855 - val_loss: 0.4809 - val_mean_squared_error: 0.4809\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.2709 - mean_squared_error: 0.2709 - val_loss: 0.5782 - val_mean_squared_error: 0.5782\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2686 - mean_squared_error: 0.2686 - val_loss: 0.5428 - val_mean_squared_error: 0.5428\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2529 - mean_squared_error: 0.2529 - val_loss: 0.6061 - val_mean_squared_error: 0.6061\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2583 - mean_squared_error: 0.2583 - val_loss: 0.5649 - val_mean_squared_error: 0.5649\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2369 - mean_squared_error: 0.2369 - val_loss: 0.5407 - val_mean_squared_error: 0.5407\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2380 - mean_squared_error: 0.2380 - val_loss: 0.6243 - val_mean_squared_error: 0.6243\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2312 - mean_squared_error: 0.2312 - val_loss: 0.6220 - val_mean_squared_error: 0.6220\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2207 - mean_squared_error: 0.2207 - val_loss: 0.4645 - val_mean_squared_error: 0.4645\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2131 - mean_squared_error: 0.2131 - val_loss: 0.5424 - val_mean_squared_error: 0.5424\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2145 - mean_squared_error: 0.2145 - val_loss: 0.7238 - val_mean_squared_error: 0.7238\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2082 - mean_squared_error: 0.2082 - val_loss: 0.5791 - val_mean_squared_error: 0.5791\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1958 - mean_squared_error: 0.1958 - val_loss: 0.4121 - val_mean_squared_error: 0.4121\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1884 - mean_squared_error: 0.1884 - val_loss: 0.4252 - val_mean_squared_error: 0.4252\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1872 - mean_squared_error: 0.1872 - val_loss: 0.4195 - val_mean_squared_error: 0.4195\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1768 - mean_squared_error: 0.1768 - val_loss: 0.3332 - val_mean_squared_error: 0.3332\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1727 - mean_squared_error: 0.1727 - val_loss: 0.3387 - val_mean_squared_error: 0.3387\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1663 - mean_squared_error: 0.1663 - val_loss: 0.3967 - val_mean_squared_error: 0.3967\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1623 - mean_squared_error: 0.1623 - val_loss: 0.3630 - val_mean_squared_error: 0.3630\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1555 - mean_squared_error: 0.1555 - val_loss: 0.3151 - val_mean_squared_error: 0.3151\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1416 - mean_squared_error: 0.1416 - val_loss: 0.3008 - val_mean_squared_error: 0.3008\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1352 - mean_squared_error: 0.1352 - val_loss: 0.1781 - val_mean_squared_error: 0.1781\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1393 - mean_squared_error: 0.1393 - val_loss: 0.3157 - val_mean_squared_error: 0.3157\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1123 - mean_squared_error: 0.1123 - val_loss: 0.1568 - val_mean_squared_error: 0.1568\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1084 - mean_squared_error: 0.1084 - val_loss: 0.1097 - val_mean_squared_error: 0.1097\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a3f473dd8>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"carr_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Carrot')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>9769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>13467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>13274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>11550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>8444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>8552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>8111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>10317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>11011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>8768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>11019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>13129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>11740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>10830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>7156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>7584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>9029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>10145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>10362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>8889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>8472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>8197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>8164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>8933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>9908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>10528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>7474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>6586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>5626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>5586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>9204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>9472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>9423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>8442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>9187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>10525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>9467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>9664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>6865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>6891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>8128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>8400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>8584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>9157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  10521\n",
       "1    1   9769\n",
       "2    2  10227\n",
       "3    3  13467\n",
       "4    4  13274\n",
       "5    5  11550\n",
       "6    6   8444\n",
       "7    7   7708\n",
       "8    8   8022\n",
       "9    9   8552\n",
       "10  10   8111\n",
       "11  11  10317\n",
       "12  12  11011\n",
       "13  13   8768\n",
       "14  14  11019\n",
       "15  15  13129\n",
       "16  16  11740\n",
       "17  17  10830\n",
       "18  18   7156\n",
       "19  19   7584\n",
       "20  20   9029\n",
       "21  21  10145\n",
       "22  22  10362\n",
       "23  23   8889\n",
       "24  24   8472\n",
       "25  25   8197\n",
       "26  26   8164\n",
       "27  27   8933\n",
       "28  28   9908\n",
       "29  29  10528\n",
       "30  30   7474\n",
       "31  31   6586\n",
       "32  32   5626\n",
       "33  33   5586\n",
       "34  34   9204\n",
       "35  35   9472\n",
       "36  36   9423\n",
       "37  37   8442\n",
       "38  38   9187\n",
       "39  39  10525\n",
       "40  40   9467\n",
       "41  41   9664\n",
       "42  42   6865\n",
       "43  43   6891\n",
       "44  44   8128\n",
       "45  45   8400\n",
       "46  46   8584\n",
       "47  47   9157"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onn_data = pd.read_csv(\"dset/onn.csv\")\n",
    "onn_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = onn_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_25 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_26 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_13 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 5s 146ms/step - loss: 0.0575 - mean_squared_error: 0.0575 - val_loss: 0.0126 - val_mean_squared_error: 0.0126\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0537 - mean_squared_error: 0.0537 - val_loss: 0.0077 - val_mean_squared_error: 0.0077\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0493 - mean_squared_error: 0.0493 - val_loss: 0.0047 - val_mean_squared_error: 0.0047\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0450 - mean_squared_error: 0.0450 - val_loss: 0.0025 - val_mean_squared_error: 0.0025\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0446 - mean_squared_error: 0.0446 - val_loss: 0.0047 - val_mean_squared_error: 0.0047\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0405 - mean_squared_error: 0.0405 - val_loss: 0.0044 - val_mean_squared_error: 0.0044\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0408 - mean_squared_error: 0.0408 - val_loss: 0.0136 - val_mean_squared_error: 0.0136\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0093 - val_mean_squared_error: 0.0093\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0411 - mean_squared_error: 0.0411 - val_loss: 0.0150 - val_mean_squared_error: 0.0150\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0401 - mean_squared_error: 0.0401 - val_loss: 0.0125 - val_mean_squared_error: 0.0125\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0384 - mean_squared_error: 0.0384 - val_loss: 0.0088 - val_mean_squared_error: 0.0088\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0392 - mean_squared_error: 0.0392 - val_loss: 0.0084 - val_mean_squared_error: 0.0084\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0093 - val_mean_squared_error: 0.0093\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0129 - val_mean_squared_error: 0.0129\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0384 - mean_squared_error: 0.0384 - val_loss: 0.0105 - val_mean_squared_error: 0.0105\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0382 - mean_squared_error: 0.0382 - val_loss: 0.0086 - val_mean_squared_error: 0.0086\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0384 - mean_squared_error: 0.0384 - val_loss: 0.0058 - val_mean_squared_error: 0.0058\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0389 - mean_squared_error: 0.0389 - val_loss: 0.0095 - val_mean_squared_error: 0.0095\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0379 - mean_squared_error: 0.0379 - val_loss: 0.0077 - val_mean_squared_error: 0.0077\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0386 - mean_squared_error: 0.0386 - val_loss: 0.0082 - val_mean_squared_error: 0.0082\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0381 - mean_squared_error: 0.0381 - val_loss: 0.0056 - val_mean_squared_error: 0.0056\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0386 - mean_squared_error: 0.0386 - val_loss: 0.0059 - val_mean_squared_error: 0.0059\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0383 - mean_squared_error: 0.0383 - val_loss: 0.0077 - val_mean_squared_error: 0.0077\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0376 - mean_squared_error: 0.0376 - val_loss: 0.0095 - val_mean_squared_error: 0.0095\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0374 - mean_squared_error: 0.0374 - val_loss: 0.0115 - val_mean_squared_error: 0.0115\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0374 - mean_squared_error: 0.0374 - val_loss: 0.0094 - val_mean_squared_error: 0.0094\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0375 - mean_squared_error: 0.0375 - val_loss: 0.0087 - val_mean_squared_error: 0.0087\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0383 - mean_squared_error: 0.0383 - val_loss: 0.0086 - val_mean_squared_error: 0.0086\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0377 - mean_squared_error: 0.0377 - val_loss: 0.0069 - val_mean_squared_error: 0.0069\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0378 - mean_squared_error: 0.0378 - val_loss: 0.0093 - val_mean_squared_error: 0.0093\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a404cb198>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"onn_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Onion')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>6651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>5442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>7174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>8031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>8894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>9007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>2796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>2762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>5734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>8900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>7455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0   6651\n",
       "1    1   5442\n",
       "2    2   7174\n",
       "3    3   8031\n",
       "4    4  10079\n",
       "5    5   8894\n",
       "6    6   9007\n",
       "7    7   2796\n",
       "8    8   2762\n",
       "9    9   5734\n",
       "10  10   8900\n",
       "11  11   7455\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pepp_data = pd.read_csv(\"dset/pepp.csv\")\n",
    "pepp_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = pepp_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_27 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_28 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_14 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 6s 169ms/step - loss: 2.8580 - mean_squared_error: 2.8580 - val_loss: 0.1421 - val_mean_squared_error: 0.1421\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 2.7482 - mean_squared_error: 2.7482 - val_loss: 0.1284 - val_mean_squared_error: 0.1284\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 2.6181 - mean_squared_error: 2.6181 - val_loss: 0.1136 - val_mean_squared_error: 0.1136\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 2.4536 - mean_squared_error: 2.4536 - val_loss: 0.0982 - val_mean_squared_error: 0.0982\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 2.2691 - mean_squared_error: 2.2691 - val_loss: 0.0816 - val_mean_squared_error: 0.0816\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 2.0348 - mean_squared_error: 2.0348 - val_loss: 0.0638 - val_mean_squared_error: 0.0638\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 1.7728 - mean_squared_error: 1.7728 - val_loss: 0.0502 - val_mean_squared_error: 0.0502\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 1.5123 - mean_squared_error: 1.5123 - val_loss: 0.0428 - val_mean_squared_error: 0.0428\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 1.3668 - mean_squared_error: 1.3668 - val_loss: 0.0433 - val_mean_squared_error: 0.0433\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 1.1540 - mean_squared_error: 1.1540 - val_loss: 0.0457 - val_mean_squared_error: 0.0457\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.9236 - mean_squared_error: 0.9236 - val_loss: 0.0582 - val_mean_squared_error: 0.0582\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.7815 - mean_squared_error: 0.7815 - val_loss: 0.0721 - val_mean_squared_error: 0.0721\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.6939 - mean_squared_error: 0.6939 - val_loss: 0.0886 - val_mean_squared_error: 0.0886\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.5322 - mean_squared_error: 0.5322 - val_loss: 0.0968 - val_mean_squared_error: 0.0968\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.4689 - mean_squared_error: 0.4689 - val_loss: 0.1143 - val_mean_squared_error: 0.1143\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.3737 - mean_squared_error: 0.3737 - val_loss: 0.1227 - val_mean_squared_error: 0.1227\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.3226 - mean_squared_error: 0.3226 - val_loss: 0.1334 - val_mean_squared_error: 0.1334\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2787 - mean_squared_error: 0.2787 - val_loss: 0.1329 - val_mean_squared_error: 0.1329\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2573 - mean_squared_error: 0.2573 - val_loss: 0.1252 - val_mean_squared_error: 0.1252\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2600 - mean_squared_error: 0.2600 - val_loss: 0.1327 - val_mean_squared_error: 0.1327\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2200 - mean_squared_error: 0.2200 - val_loss: 0.1452 - val_mean_squared_error: 0.1452\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.2029 - mean_squared_error: 0.2029 - val_loss: 0.1409 - val_mean_squared_error: 0.1409\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1946 - mean_squared_error: 0.1946 - val_loss: 0.1315 - val_mean_squared_error: 0.1315\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1889 - mean_squared_error: 0.1889 - val_loss: 0.1185 - val_mean_squared_error: 0.1185\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1830 - mean_squared_error: 0.1830 - val_loss: 0.1144 - val_mean_squared_error: 0.1144\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1817 - mean_squared_error: 0.1817 - val_loss: 0.1118 - val_mean_squared_error: 0.1118\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1769 - mean_squared_error: 0.1769 - val_loss: 0.1076 - val_mean_squared_error: 0.1076\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1729 - mean_squared_error: 0.1729 - val_loss: 0.1017 - val_mean_squared_error: 0.1017\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1697 - mean_squared_error: 0.1697 - val_loss: 0.0989 - val_mean_squared_error: 0.0989\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1693 - mean_squared_error: 0.1693 - val_loss: 0.1018 - val_mean_squared_error: 0.1018\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a40514e10>"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"pepp_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Pepper')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pot_data = pd.read_csv(\"dset/pot.csv\")\n",
    "pot_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = pot_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_29 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_30 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_15 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 5s 162ms/step - loss: 0.1227 - mean_squared_error: 0.1227 - val_loss: 0.1730 - val_mean_squared_error: 0.1730\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1140 - mean_squared_error: 0.1140 - val_loss: 0.1658 - val_mean_squared_error: 0.1658\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1093 - mean_squared_error: 0.1093 - val_loss: 0.1600 - val_mean_squared_error: 0.1600\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1057 - mean_squared_error: 0.1057 - val_loss: 0.1522 - val_mean_squared_error: 0.1522\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1011 - mean_squared_error: 0.1011 - val_loss: 0.1400 - val_mean_squared_error: 0.1400\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0981 - mean_squared_error: 0.0981 - val_loss: 0.1349 - val_mean_squared_error: 0.1349\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0972 - mean_squared_error: 0.0972 - val_loss: 0.1359 - val_mean_squared_error: 0.1359\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0927 - mean_squared_error: 0.0927 - val_loss: 0.1280 - val_mean_squared_error: 0.1280\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0903 - mean_squared_error: 0.0903 - val_loss: 0.1255 - val_mean_squared_error: 0.1255\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0890 - mean_squared_error: 0.0890 - val_loss: 0.1269 - val_mean_squared_error: 0.1269\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0860 - mean_squared_error: 0.0860 - val_loss: 0.1209 - val_mean_squared_error: 0.1209\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0843 - mean_squared_error: 0.0843 - val_loss: 0.1232 - val_mean_squared_error: 0.1232\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0828 - mean_squared_error: 0.0828 - val_loss: 0.1209 - val_mean_squared_error: 0.1209\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0806 - mean_squared_error: 0.0806 - val_loss: 0.1119 - val_mean_squared_error: 0.1119\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0785 - mean_squared_error: 0.0785 - val_loss: 0.0977 - val_mean_squared_error: 0.0977\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0751 - mean_squared_error: 0.0751 - val_loss: 0.0850 - val_mean_squared_error: 0.0850\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0725 - mean_squared_error: 0.0725 - val_loss: 0.0766 - val_mean_squared_error: 0.0766\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0677 - mean_squared_error: 0.0677 - val_loss: 0.0725 - val_mean_squared_error: 0.0725\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0641 - mean_squared_error: 0.0641 - val_loss: 0.0607 - val_mean_squared_error: 0.0607\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0594 - mean_squared_error: 0.0594 - val_loss: 0.0512 - val_mean_squared_error: 0.0512\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0528 - mean_squared_error: 0.0528 - val_loss: 0.0316 - val_mean_squared_error: 0.0316\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0464 - mean_squared_error: 0.0464 - val_loss: 0.0195 - val_mean_squared_error: 0.0195\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0428 - mean_squared_error: 0.0428 - val_loss: 0.0116 - val_mean_squared_error: 0.0116\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0408 - mean_squared_error: 0.0408 - val_loss: 0.0145 - val_mean_squared_error: 0.0145\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0378 - mean_squared_error: 0.0378 - val_loss: 0.0091 - val_mean_squared_error: 0.0091\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0370 - mean_squared_error: 0.0370 - val_loss: 0.0170 - val_mean_squared_error: 0.0170\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0363 - mean_squared_error: 0.0363 - val_loss: 0.0505 - val_mean_squared_error: 0.0505\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0352 - mean_squared_error: 0.0352 - val_loss: 0.0096 - val_mean_squared_error: 0.0096\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0328 - mean_squared_error: 0.0328 - val_loss: 0.0053 - val_mean_squared_error: 0.0053\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0333 - mean_squared_error: 0.0333 - val_loss: 0.0217 - val_mean_squared_error: 0.0217\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a3a655208>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"pop_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Potato')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "app_data = pd.read_csv(\"dset/app.csv\")\n",
    "app_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = app_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_31 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_32 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_16 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 6s 173ms/step - loss: 0.1104 - mean_squared_error: 0.1104 - val_loss: 0.1565 - val_mean_squared_error: 0.1565\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1038 - mean_squared_error: 0.1038 - val_loss: 0.1471 - val_mean_squared_error: 0.1471\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0993 - mean_squared_error: 0.0993 - val_loss: 0.1414 - val_mean_squared_error: 0.1414\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0960 - mean_squared_error: 0.0960 - val_loss: 0.1363 - val_mean_squared_error: 0.1363\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0946 - mean_squared_error: 0.0946 - val_loss: 0.1400 - val_mean_squared_error: 0.1400\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0914 - mean_squared_error: 0.0914 - val_loss: 0.1400 - val_mean_squared_error: 0.1400\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0900 - mean_squared_error: 0.0900 - val_loss: 0.1374 - val_mean_squared_error: 0.1374\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0881 - mean_squared_error: 0.0881 - val_loss: 0.1355 - val_mean_squared_error: 0.1355\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0857 - mean_squared_error: 0.0857 - val_loss: 0.1256 - val_mean_squared_error: 0.1256\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0839 - mean_squared_error: 0.0839 - val_loss: 0.1120 - val_mean_squared_error: 0.1120\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0811 - mean_squared_error: 0.0811 - val_loss: 0.0965 - val_mean_squared_error: 0.0965\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0791 - mean_squared_error: 0.0791 - val_loss: 0.0937 - val_mean_squared_error: 0.0937\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0762 - mean_squared_error: 0.0762 - val_loss: 0.0895 - val_mean_squared_error: 0.0895\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0734 - mean_squared_error: 0.0734 - val_loss: 0.0856 - val_mean_squared_error: 0.0856\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0708 - mean_squared_error: 0.0708 - val_loss: 0.0781 - val_mean_squared_error: 0.0781\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0671 - mean_squared_error: 0.0671 - val_loss: 0.0747 - val_mean_squared_error: 0.0747\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0627 - mean_squared_error: 0.0627 - val_loss: 0.0687 - val_mean_squared_error: 0.0687\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0568 - mean_squared_error: 0.0568 - val_loss: 0.0536 - val_mean_squared_error: 0.0536\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0520 - mean_squared_error: 0.0520 - val_loss: 0.0353 - val_mean_squared_error: 0.0353\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0461 - mean_squared_error: 0.0461 - val_loss: 0.0206 - val_mean_squared_error: 0.0206\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0430 - mean_squared_error: 0.0430 - val_loss: 0.0075 - val_mean_squared_error: 0.0075\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0155 - val_mean_squared_error: 0.0155\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0381 - mean_squared_error: 0.0381 - val_loss: 0.0106 - val_mean_squared_error: 0.0106\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0363 - mean_squared_error: 0.0363 - val_loss: 0.0244 - val_mean_squared_error: 0.0244\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0341 - mean_squared_error: 0.0341 - val_loss: 0.0186 - val_mean_squared_error: 0.0186\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0343 - mean_squared_error: 0.0343 - val_loss: 0.0371 - val_mean_squared_error: 0.0371\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0323 - mean_squared_error: 0.0323 - val_loss: 0.0208 - val_mean_squared_error: 0.0208\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0303 - mean_squared_error: 0.0303 - val_loss: 0.0125 - val_mean_squared_error: 0.0125\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0312 - mean_squared_error: 0.0312 - val_loss: 0.0059 - val_mean_squared_error: 0.0059\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0301 - mean_squared_error: 0.0301 - val_loss: 0.0133 - val_mean_squared_error: 0.0133\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a373149e8>"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"app_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Apple')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grp_data = pd.read_csv(\"dset/grp.csv\")\n",
    "grp_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = grp_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_33 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_34 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_17 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 6s 182ms/step - loss: 0.1038 - mean_squared_error: 0.1038 - val_loss: 0.1417 - val_mean_squared_error: 0.1417\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0994 - mean_squared_error: 0.0994 - val_loss: 0.1440 - val_mean_squared_error: 0.1440\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0969 - mean_squared_error: 0.0969 - val_loss: 0.1353 - val_mean_squared_error: 0.1353\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0947 - mean_squared_error: 0.0947 - val_loss: 0.1339 - val_mean_squared_error: 0.1339\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0924 - mean_squared_error: 0.0924 - val_loss: 0.1299 - val_mean_squared_error: 0.1299\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0911 - mean_squared_error: 0.0911 - val_loss: 0.1333 - val_mean_squared_error: 0.1333\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0892 - mean_squared_error: 0.0892 - val_loss: 0.1291 - val_mean_squared_error: 0.1291\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0870 - mean_squared_error: 0.0870 - val_loss: 0.1227 - val_mean_squared_error: 0.1227\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0867 - mean_squared_error: 0.0867 - val_loss: 0.1165 - val_mean_squared_error: 0.1165\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0840 - mean_squared_error: 0.0840 - val_loss: 0.1198 - val_mean_squared_error: 0.1198\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0819 - mean_squared_error: 0.0819 - val_loss: 0.1201 - val_mean_squared_error: 0.1201\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0804 - mean_squared_error: 0.0804 - val_loss: 0.1215 - val_mean_squared_error: 0.1215\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0798 - mean_squared_error: 0.0798 - val_loss: 0.1240 - val_mean_squared_error: 0.1240\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0778 - mean_squared_error: 0.0778 - val_loss: 0.1171 - val_mean_squared_error: 0.1171\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0748 - mean_squared_error: 0.0748 - val_loss: 0.1089 - val_mean_squared_error: 0.1089\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0727 - mean_squared_error: 0.0727 - val_loss: 0.0947 - val_mean_squared_error: 0.0947\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0688 - mean_squared_error: 0.0688 - val_loss: 0.0845 - val_mean_squared_error: 0.0845\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0672 - mean_squared_error: 0.0672 - val_loss: 0.0753 - val_mean_squared_error: 0.0753\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0635 - mean_squared_error: 0.0635 - val_loss: 0.0722 - val_mean_squared_error: 0.0722\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0571 - mean_squared_error: 0.0571 - val_loss: 0.0612 - val_mean_squared_error: 0.0612\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0531 - mean_squared_error: 0.0531 - val_loss: 0.0625 - val_mean_squared_error: 0.0625\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0491 - mean_squared_error: 0.0491 - val_loss: 0.0466 - val_mean_squared_error: 0.0466\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0448 - mean_squared_error: 0.0448 - val_loss: 0.0393 - val_mean_squared_error: 0.0393\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0419 - mean_squared_error: 0.0419 - val_loss: 0.0160 - val_mean_squared_error: 0.0160\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0389 - mean_squared_error: 0.0389 - val_loss: 0.0109 - val_mean_squared_error: 0.0109\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - ETA: 0s - loss: 0.0342 - mean_squared_error: 0.03 - 0s 3ms/step - loss: 0.0369 - mean_squared_error: 0.0369 - val_loss: 0.0063 - val_mean_squared_error: 0.0063\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0345 - mean_squared_error: 0.0345 - val_loss: 0.0124 - val_mean_squared_error: 0.0124\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0322 - mean_squared_error: 0.0322 - val_loss: 0.0231 - val_mean_squared_error: 0.0231\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0312 - mean_squared_error: 0.0312 - val_loss: 0.0157 - val_mean_squared_error: 0.0157\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0313 - mean_squared_error: 0.0313 - val_loss: 0.0118 - val_mean_squared_error: 0.0118\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a47890240>"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"grp_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Grape')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orn_data = pd.read_csv(\"dset/orn.csv\")\n",
    "orn_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = orn_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_35 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_36 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_18 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse', metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 7s 198ms/step - loss: 0.1115 - mean_squared_error: 0.1115 - val_loss: 0.1538 - val_mean_squared_error: 0.1538\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1051 - mean_squared_error: 0.1051 - val_loss: 0.1464 - val_mean_squared_error: 0.1464\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1025 - mean_squared_error: 0.1025 - val_loss: 0.1436 - val_mean_squared_error: 0.1436\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0994 - mean_squared_error: 0.0994 - val_loss: 0.1380 - val_mean_squared_error: 0.1380\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0964 - mean_squared_error: 0.0964 - val_loss: 0.1281 - val_mean_squared_error: 0.1281\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0939 - mean_squared_error: 0.0939 - val_loss: 0.1238 - val_mean_squared_error: 0.1238\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0921 - mean_squared_error: 0.0921 - val_loss: 0.1262 - val_mean_squared_error: 0.1262\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0885 - mean_squared_error: 0.0885 - val_loss: 0.1224 - val_mean_squared_error: 0.1224\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0880 - mean_squared_error: 0.0880 - val_loss: 0.1224 - val_mean_squared_error: 0.1224\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0837 - mean_squared_error: 0.0837 - val_loss: 0.1162 - val_mean_squared_error: 0.1162\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0807 - mean_squared_error: 0.0807 - val_loss: 0.1078 - val_mean_squared_error: 0.1078\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0795 - mean_squared_error: 0.0795 - val_loss: 0.1045 - val_mean_squared_error: 0.1045\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0745 - mean_squared_error: 0.0745 - val_loss: 0.0941 - val_mean_squared_error: 0.0941\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0707 - mean_squared_error: 0.0707 - val_loss: 0.0864 - val_mean_squared_error: 0.0864\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0654 - mean_squared_error: 0.0654 - val_loss: 0.0614 - val_mean_squared_error: 0.0614\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0586 - mean_squared_error: 0.0586 - val_loss: 0.0408 - val_mean_squared_error: 0.0408\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0523 - mean_squared_error: 0.0523 - val_loss: 0.0254 - val_mean_squared_error: 0.0254\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0470 - mean_squared_error: 0.0470 - val_loss: 0.0136 - val_mean_squared_error: 0.0136\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0407 - mean_squared_error: 0.0407 - val_loss: 0.0058 - val_mean_squared_error: 0.0058\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0402 - mean_squared_error: 0.0402 - val_loss: 0.0111 - val_mean_squared_error: 0.0111\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0390 - mean_squared_error: 0.0390 - val_loss: 0.0272 - val_mean_squared_error: 0.0272\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0382 - mean_squared_error: 0.0382 - val_loss: 0.0396 - val_mean_squared_error: 0.0396\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0376 - mean_squared_error: 0.0376 - val_loss: 0.0321 - val_mean_squared_error: 0.0321\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0328 - mean_squared_error: 0.0328 - val_loss: 0.0732 - val_mean_squared_error: 0.0732\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0332 - mean_squared_error: 0.0332 - val_loss: 0.0253 - val_mean_squared_error: 0.0253\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0305 - mean_squared_error: 0.0305 - val_loss: 0.0073 - val_mean_squared_error: 0.0073\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0335 - mean_squared_error: 0.0335 - val_loss: 0.0096 - val_mean_squared_error: 0.0096\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0323 - mean_squared_error: 0.0323 - val_loss: 0.0201 - val_mean_squared_error: 0.0201\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0289 - mean_squared_error: 0.0289 - val_loss: 0.0166 - val_mean_squared_error: 0.0166\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0286 - mean_squared_error: 0.0286 - val_loss: 0.0526 - val_mean_squared_error: 0.0526\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a498274a8>"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"orn_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Orange')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr_data = pd.read_csv(\"dset/pr.csv\")\n",
    "pr_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = pr_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_37 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_38 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_19 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mse',metrics=['mean_squared_error'],optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 7s 198ms/step - loss: 0.1171 - mean_squared_error: 0.1171 - val_loss: 0.1631 - val_mean_squared_error: 0.1631\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1064 - mean_squared_error: 0.1064 - val_loss: 0.1517 - val_mean_squared_error: 0.1517\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1015 - mean_squared_error: 0.1015 - val_loss: 0.1361 - val_mean_squared_error: 0.1361\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0967 - mean_squared_error: 0.0967 - val_loss: 0.1296 - val_mean_squared_error: 0.1296\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0950 - mean_squared_error: 0.0950 - val_loss: 0.1238 - val_mean_squared_error: 0.1238\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0929 - mean_squared_error: 0.0929 - val_loss: 0.1119 - val_mean_squared_error: 0.1119\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0900 - mean_squared_error: 0.0900 - val_loss: 0.1103 - val_mean_squared_error: 0.1103\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0872 - mean_squared_error: 0.0872 - val_loss: 0.1091 - val_mean_squared_error: 0.1091\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0839 - mean_squared_error: 0.0839 - val_loss: 0.1089 - val_mean_squared_error: 0.1089\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0813 - mean_squared_error: 0.0813 - val_loss: 0.1067 - val_mean_squared_error: 0.1067\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0793 - mean_squared_error: 0.0793 - val_loss: 0.1010 - val_mean_squared_error: 0.1010\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0762 - mean_squared_error: 0.0762 - val_loss: 0.0930 - val_mean_squared_error: 0.0930\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0735 - mean_squared_error: 0.0735 - val_loss: 0.0961 - val_mean_squared_error: 0.0961\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0699 - mean_squared_error: 0.0699 - val_loss: 0.0898 - val_mean_squared_error: 0.0898\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0664 - mean_squared_error: 0.0664 - val_loss: 0.0757 - val_mean_squared_error: 0.0757\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0628 - mean_squared_error: 0.0628 - val_loss: 0.0714 - val_mean_squared_error: 0.0714\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0581 - mean_squared_error: 0.0581 - val_loss: 0.0632 - val_mean_squared_error: 0.0632\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0529 - mean_squared_error: 0.0529 - val_loss: 0.0471 - val_mean_squared_error: 0.0471\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0471 - mean_squared_error: 0.0471 - val_loss: 0.0319 - val_mean_squared_error: 0.0319\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0435 - mean_squared_error: 0.0435 - val_loss: 0.0189 - val_mean_squared_error: 0.0189\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0426 - mean_squared_error: 0.0426 - val_loss: 0.0137 - val_mean_squared_error: 0.0137\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0377 - mean_squared_error: 0.0377 - val_loss: 0.0100 - val_mean_squared_error: 0.0100\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0371 - mean_squared_error: 0.0371 - val_loss: 0.0175 - val_mean_squared_error: 0.0175\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0358 - mean_squared_error: 0.0358 - val_loss: 0.0088 - val_mean_squared_error: 0.0088\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0334 - mean_squared_error: 0.0334 - val_loss: 0.0159 - val_mean_squared_error: 0.0159\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0345 - mean_squared_error: 0.0345 - val_loss: 0.0148 - val_mean_squared_error: 0.0148\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - ETA: 0s - loss: 0.0254 - mean_squared_error: 0.02 - 0s 3ms/step - loss: 0.0327 - mean_squared_error: 0.0327 - val_loss: 0.0448 - val_mean_squared_error: 0.0448\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.0341 - mean_squared_error: 0.0341 - val_loss: 0.0192 - val_mean_squared_error: 0.0192\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0307 - mean_squared_error: 0.0307 - val_loss: 0.0121 - val_mean_squared_error: 0.0121\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0306 - mean_squared_error: 0.0306 - val_loss: 0.0144 - val_mean_squared_error: 0.0144\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a3a1b95c0>"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"pr_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Pear')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mo</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>12142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>12442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>22722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>21061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>12203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>14272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>15487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>12958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>13109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>12036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>17325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>20599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>20549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>16806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>17771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>17614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>14187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>14331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>12409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>10463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>10762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>10584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>11941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>12726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>16177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>18766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>20217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>24643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34</td>\n",
       "      <td>20674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>14274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>13049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>9376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>10431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>9722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>13217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>13853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>16431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>19519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>19332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>22165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>20145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47</td>\n",
       "      <td>21338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mo  value\n",
       "0    0  12142\n",
       "1    1  11559\n",
       "2    2  12442\n",
       "3    3  11764\n",
       "4    4  16648\n",
       "5    5  22722\n",
       "6    6  21061\n",
       "7    7  16180\n",
       "8    8  12203\n",
       "9    9  12335\n",
       "10  10  14272\n",
       "11  11  11836\n",
       "12  12  15487\n",
       "13  13  12958\n",
       "14  14  13109\n",
       "15  15  12036\n",
       "16  16  17325\n",
       "17  17  20599\n",
       "18  18  20549\n",
       "19  19  16806\n",
       "20  20  17771\n",
       "21  21  17614\n",
       "22  22  14187\n",
       "23  23  14331\n",
       "24  24  12409\n",
       "25  25  10463\n",
       "26  26  10762\n",
       "27  27  10584\n",
       "28  28  11941\n",
       "29  29  12726\n",
       "30  30  16177\n",
       "31  31  18766\n",
       "32  32  20217\n",
       "33  33  24643\n",
       "34  34  20674\n",
       "35  35  14274\n",
       "36  36  13049\n",
       "37  37   9376\n",
       "38  38  10431\n",
       "39  39   9722\n",
       "40  40  13217\n",
       "41  41  13853\n",
       "42  42  16431\n",
       "43  43  19519\n",
       "44  44  19332\n",
       "45  45  22165\n",
       "46  46  20145\n",
       "47  47  21338"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str_data = pd.read_csv(\"dset/str.csv\")\n",
    "str_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "value = str_data[\"value\"].values\n",
    "seq_len = 10\n",
    "sequence_length = seq_len + 1\n",
    "\n",
    "result = []\n",
    "for index in range(len(value) - sequence_length):\n",
    "    result.append(value[index: index + sequence_length])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((33, 10, 1), (4, 10, 1))"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_data = []\n",
    "for window in result:\n",
    "    normalized_window = [((float(p) / float(window[0])) - 1) for p in window]\n",
    "    normalized_data.append(normalized_window)\n",
    "\n",
    "result = np.array(normalized_data)\n",
    "\n",
    "# split train and test data\n",
    "row = int(round(result.shape[0] * 0.9))\n",
    "train = result[:row, :]\n",
    "np.random.shuffle(train)\n",
    "\n",
    "x_train = train[:, :-1]\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "y_train = train[:, -1]\n",
    "\n",
    "x_test = result[row:, :-1]\n",
    "x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n",
    "y_test = result[row:, -1]\n",
    "\n",
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_39 (LSTM)               (None, 10, 10)            480       \n",
      "_________________________________________________________________\n",
      "lstm_40 (LSTM)               (None, 24)                3360      \n",
      "_________________________________________________________________\n",
      "dense_20 (Dense)             (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 3,865\n",
      "Trainable params: 3,865\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(10, return_sequences=True, input_shape=(10, 1)))\n",
    "\n",
    "model.add(LSTM(24, return_sequences=False))\n",
    "\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "model.compile(loss='mean_squared_error', metrics=['mean_squared_error'], optimizer='nadam')\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33 samples, validate on 4 samples\n",
      "Epoch 1/30\n",
      "33/33 [==============================] - 7s 206ms/step - loss: 0.1179 - mean_squared_error: 0.1179 - val_loss: 0.1564 - val_mean_squared_error: 0.1564\n",
      "Epoch 2/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1086 - mean_squared_error: 0.1086 - val_loss: 0.1471 - val_mean_squared_error: 0.1471\n",
      "Epoch 3/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.1035 - mean_squared_error: 0.1035 - val_loss: 0.1474 - val_mean_squared_error: 0.1474\n",
      "Epoch 4/30\n",
      "33/33 [==============================] - 0s 4ms/step - loss: 0.1007 - mean_squared_error: 0.1007 - val_loss: 0.1360 - val_mean_squared_error: 0.1360\n",
      "Epoch 5/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0972 - mean_squared_error: 0.0972 - val_loss: 0.1345 - val_mean_squared_error: 0.1345\n",
      "Epoch 6/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0957 - mean_squared_error: 0.0957 - val_loss: 0.1249 - val_mean_squared_error: 0.1249\n",
      "Epoch 7/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0937 - mean_squared_error: 0.0937 - val_loss: 0.1248 - val_mean_squared_error: 0.1248\n",
      "Epoch 8/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0921 - mean_squared_error: 0.0921 - val_loss: 0.1293 - val_mean_squared_error: 0.1293\n",
      "Epoch 9/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0894 - mean_squared_error: 0.0894 - val_loss: 0.1256 - val_mean_squared_error: 0.1256\n",
      "Epoch 10/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0872 - mean_squared_error: 0.0872 - val_loss: 0.1157 - val_mean_squared_error: 0.1157\n",
      "Epoch 11/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0843 - mean_squared_error: 0.0843 - val_loss: 0.1208 - val_mean_squared_error: 0.1208\n",
      "Epoch 12/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0818 - mean_squared_error: 0.0818 - val_loss: 0.1133 - val_mean_squared_error: 0.1133\n",
      "Epoch 13/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0802 - mean_squared_error: 0.0802 - val_loss: 0.1053 - val_mean_squared_error: 0.1053\n",
      "Epoch 14/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0770 - mean_squared_error: 0.0770 - val_loss: 0.1052 - val_mean_squared_error: 0.1052\n",
      "Epoch 15/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0747 - mean_squared_error: 0.0747 - val_loss: 0.1075 - val_mean_squared_error: 0.1075\n",
      "Epoch 16/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0719 - mean_squared_error: 0.0719 - val_loss: 0.1071 - val_mean_squared_error: 0.1071\n",
      "Epoch 17/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0692 - mean_squared_error: 0.0692 - val_loss: 0.0914 - val_mean_squared_error: 0.0914\n",
      "Epoch 18/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0658 - mean_squared_error: 0.0658 - val_loss: 0.0835 - val_mean_squared_error: 0.0835\n",
      "Epoch 19/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0610 - mean_squared_error: 0.0610 - val_loss: 0.0667 - val_mean_squared_error: 0.0667\n",
      "Epoch 20/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0560 - mean_squared_error: 0.0560 - val_loss: 0.0414 - val_mean_squared_error: 0.0414\n",
      "Epoch 21/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0521 - mean_squared_error: 0.0521 - val_loss: 0.0374 - val_mean_squared_error: 0.0374\n",
      "Epoch 22/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0454 - mean_squared_error: 0.0454 - val_loss: 0.0267 - val_mean_squared_error: 0.0267\n",
      "Epoch 23/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0420 - mean_squared_error: 0.0420 - val_loss: 0.0144 - val_mean_squared_error: 0.0144\n",
      "Epoch 24/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0383 - mean_squared_error: 0.0383 - val_loss: 0.0090 - val_mean_squared_error: 0.0090\n",
      "Epoch 25/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0383 - mean_squared_error: 0.0383 - val_loss: 0.0070 - val_mean_squared_error: 0.0070\n",
      "Epoch 26/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0343 - mean_squared_error: 0.0343 - val_loss: 0.0067 - val_mean_squared_error: 0.0067\n",
      "Epoch 27/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0328 - mean_squared_error: 0.0328 - val_loss: 0.0137 - val_mean_squared_error: 0.0137\n",
      "Epoch 28/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0310 - mean_squared_error: 0.0310 - val_loss: 0.0627 - val_mean_squared_error: 0.0627\n",
      "Epoch 29/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0320 - mean_squared_error: 0.0320 - val_loss: 0.0133 - val_mean_squared_error: 0.0133\n",
      "Epoch 30/30\n",
      "33/33 [==============================] - 0s 3ms/step - loss: 0.0322 - mean_squared_error: 0.0322 - val_loss: 0.0173 - val_mean_squared_error: 0.0173\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a4d4a9128>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=10,\n",
    "    epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"str_model_trained.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model.compile(optimizer='adam', loss='mse', metrics=['mse', 'accuracy'])\n",
    "# model.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(x_test)\n",
    "\n",
    "fig = plt.figure(facecolor='white', figsize=(20, 10))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(y_test, label='True')\n",
    "ax.plot(pred, label='Prediction')\n",
    "plt.title('Strawberry')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
